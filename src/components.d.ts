/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */

import '@stencil/core';

declare global {
  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {}
  }
  namespace JSXElements {}

  interface HTMLElement {
    componentOnReady?: () => Promise<this | null>;
  }

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}
}


declare global {

  namespace StencilComponents {
    interface CuiAlert {
      'close': () => void;
      'content': string;
      'dismissible': boolean;
      'getClass': (variation: any) => string;
      'isOpen': () => boolean;
      'open': boolean;
      'show': () => void;
      'type': string;
      'variation': string;
    }
  }

  interface HTMLCuiAlertElement extends StencilComponents.CuiAlert, HTMLStencilElement {}

  var HTMLCuiAlertElement: {
    prototype: HTMLCuiAlertElement;
    new (): HTMLCuiAlertElement;
  };
  interface HTMLElementTagNameMap {
    'cui-alert': HTMLCuiAlertElement;
  }
  interface ElementTagNameMap {
    'cui-alert': HTMLCuiAlertElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'cui-alert': JSXElements.CuiAlertAttributes;
    }
  }
  namespace JSXElements {
    export interface CuiAlertAttributes extends HTMLAttributes {
      'content'?: string;
      'dismissible'?: boolean;
      'onOnClose'?: (event: CustomEvent) => void;
      'open'?: boolean;
      'type'?: string;
      'variation'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface CuiContent {
      'getGoogleAnalytics': () => void;
      'monitoring': string;
    }
  }

  interface HTMLCuiContentElement extends StencilComponents.CuiContent, HTMLStencilElement {}

  var HTMLCuiContentElement: {
    prototype: HTMLCuiContentElement;
    new (): HTMLCuiContentElement;
  };
  interface HTMLElementTagNameMap {
    'cui-content': HTMLCuiContentElement;
  }
  interface ElementTagNameMap {
    'cui-content': HTMLCuiContentElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'cui-content': JSXElements.CuiContentAttributes;
    }
  }
  namespace JSXElements {
    export interface CuiContentAttributes extends HTMLAttributes {
      'monitoring'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface CuiFooter {
      'getStickyClass': (sticky: any) => string;
      'sticky': boolean;
    }
  }

  interface HTMLCuiFooterElement extends StencilComponents.CuiFooter, HTMLStencilElement {}

  var HTMLCuiFooterElement: {
    prototype: HTMLCuiFooterElement;
    new (): HTMLCuiFooterElement;
  };
  interface HTMLElementTagNameMap {
    'cui-footer': HTMLCuiFooterElement;
  }
  interface ElementTagNameMap {
    'cui-footer': HTMLCuiFooterElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'cui-footer': JSXElements.CuiFooterAttributes;
    }
  }
  namespace JSXElements {
    export interface CuiFooterAttributes extends HTMLAttributes {
      'sticky'?: boolean;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface CuiHeader {
      'siteUrl': string;
      'titleHeader': string;
    }
  }

  interface HTMLCuiHeaderElement extends StencilComponents.CuiHeader, HTMLStencilElement {}

  var HTMLCuiHeaderElement: {
    prototype: HTMLCuiHeaderElement;
    new (): HTMLCuiHeaderElement;
  };
  interface HTMLElementTagNameMap {
    'cui-header': HTMLCuiHeaderElement;
  }
  interface ElementTagNameMap {
    'cui-header': HTMLCuiHeaderElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'cui-header': JSXElements.CuiHeaderAttributes;
    }
  }
  namespace JSXElements {
    export interface CuiHeaderAttributes extends HTMLAttributes {
      'siteUrl'?: string;
      'titleHeader'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface CuiNavItem {
      'location': string;
    }
  }

  interface HTMLCuiNavItemElement extends StencilComponents.CuiNavItem, HTMLStencilElement {}

  var HTMLCuiNavItemElement: {
    prototype: HTMLCuiNavItemElement;
    new (): HTMLCuiNavItemElement;
  };
  interface HTMLElementTagNameMap {
    'cui-nav-item': HTMLCuiNavItemElement;
  }
  interface ElementTagNameMap {
    'cui-nav-item': HTMLCuiNavItemElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'cui-nav-item': JSXElements.CuiNavItemAttributes;
    }
  }
  namespace JSXElements {
    export interface CuiNavItemAttributes extends HTMLAttributes {
      'location'?: string;
    }
  }
}

declare global { namespace JSX { interface StencilJSX {} } }

export declare function defineCustomElements(window: any): void;